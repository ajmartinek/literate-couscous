import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error

Importing the data
df = pd.read_csv('ethereum_market_data.csv')

Preprocessing the data
X = df.drop('Price', axis=1)
y = df['Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

Training the models
lr = LinearRegression()
lr.fit(X_train, y_train)

rfr = RandomForestRegressor(n_estimators=100)
rfr.fit(X_train, y_train)

svr = SVR()
svr.fit(X_train, y_train)

Evaluating the models
lr_pred = lr.predict(X_test)
rfr_pred = rfr.predict(X_test)
svr_pred = svr.predict(X_test)

lr_mse = mean_squared_error(y_test, lr_pred)
rfr_mse = mean_squared_error(y_test, rfr_pred)
svr_mse = mean_squared_error(y_test, svr_pred)

Printing the results
print("Linear Regression MSE: ", lr_mse)
print("Random Forest Regressor MSE: ", rfr_mse)
print("Support Vector Regressor MSE: ", svr_mse)

Choosing the best model
if lr_mse < rfr_mse and lr_mse < svr_mse:
print("Linear Regression is the best model for predicting ethereum price.")
elif rfr_mse < lr_mse and rfr_mse < svr_mse:
print("Random Forest Regressor is the best model for predicting ethereum price.")
else:
print("Support Vector Regressor is the best model for predicting ethereum price.")
